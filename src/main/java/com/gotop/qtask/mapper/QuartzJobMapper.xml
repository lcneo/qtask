<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gotop.qtask.dao.QuartzJobMapper">
    <sql id="selectJobVo">
        select * from quartz_job
    </sql>

    <select id="selectJobList" parameterType="QuartzJob" resultType="QuartzJob">
        <include refid="selectJobVo" />
        <where>
            <if test="jobName != null and jobName != ''">
                AND job_name like '%' || #{jobName} ||'%'
            </if>
            <if test="jobGroup != null and jobGroup != ''">
                AND job_group = #{jobGroup}
            </if>
            <if test="status != null and status != ''">
                AND status = #{status}
            </if>
            <if test="invokeTarget != null and invokeTarget != ''">
                AND invoke_target like '%' || #{invokeTarget} || '%'
            </if>
        </where>

    </select>

    <select id="selectJobAll" resultType="QuartzJob">
        <include refid="selectJobVo" />
    </select>

    <select id="selectJobById" parameterType="Long" resultType="QuartzJob">
        <include refid="selectJobVo"></include>
        where job_id = #{jobId}
    </select>

    <delete id="deleteJobById" parameterType="Long">
        delete job_id = #{jobId}
    </delete>

    <delete id="deleteJobByIds" parameterType="Long">
        delete from quartz_job where job_id in
        <foreach collection="array" item="jobId" open="(" separator="," close=")">
            #{jobId}
        </foreach>
    </delete>
    
    <update id="updateJob" parameterType="QuartzJob">
        update quartz_job
        <set>
            job_name = #{jobName},
            job_group = #{jobGroup},
            invoke_target = #{invokeTarget},
            cron_expression = #{cronExpression},
            misfire_policy = #{misfirePolicy},
            concurrent = #{concurrent},
            status = #{status},
            remark = #{remark}
        </set>
        where job_id = #{jobId}
    </update>

    <insert id="insertJob" parameterType="QuartzJob" >
        insert into quartz_job(
        job_id, job_name, job_group, invoke_target, cron_expression, misfire_policy, concurrent, status, remark
        )values(
        quartz_job_id_seq.nextval, #{jobName}, #{jobGroup}, #{invokeTarget}, #{cronExpression}, #{misfirePolicy}, #{concurrent}, #{status}, #{remark}
        )
    </insert>

</mapper>